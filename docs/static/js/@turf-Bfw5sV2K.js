var ie=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function ae(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var y=63710088e-1,U={centimeters:y*100,centimetres:y*100,degrees:360/(2*Math.PI),feet:y*3.28084,inches:y*39.37,kilometers:y/1e3,kilometres:y/1e3,meters:y,metres:y,miles:y/1609.344,millimeters:y*1e3,millimetres:y*1e3,nauticalmiles:y/1852,radians:1,yards:y*1.0936};function P(e,n,t={}){const r={type:"Feature"};return(t.id===0||t.id)&&(r.id=t.id),t.bbox&&(r.bbox=t.bbox),r.properties=n||{},r.geometry=e,r}function oe(e,n,t={}){if(!e)throw new Error("coordinates is required");if(!Array.isArray(e))throw new Error("coordinates must be an Array");if(e.length<2)throw new Error("coordinates must be at least 2 numbers long");if(!F(e[0])||!F(e[1]))throw new Error("coordinates must contain numbers");return P({type:"Point",coordinates:e},n,t)}function le(e,n,t={}){for(const i of e){if(i.length<4)throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");if(i[i.length-1].length!==i[0].length)throw new Error("First and last Position are not equivalent.");for(let a=0;a<i[i.length-1].length;a++)if(i[i.length-1][a]!==i[0][a])throw new Error("First and last Position are not equivalent.")}return P({type:"Polygon",coordinates:e},n,t)}function X(e,n,t={}){if(e.length<2)throw new Error("coordinates must be an array of two or more positions");return P({type:"LineString",coordinates:e},n,t)}function Y(e,n="kilometers"){const t=U[n];if(!t)throw new Error(n+" units is invalid");return e*t}function M(e){return e%360*Math.PI/180}function F(e){return!isNaN(e)&&e!==null&&!Array.isArray(e)}function V(e){return e!==null&&typeof e=="object"&&!Array.isArray(e)}function O(e){if(!e)throw new Error("coord is required");if(!Array.isArray(e)){if(e.type==="Feature"&&e.geometry!==null&&e.geometry.type==="Point")return[...e.geometry.coordinates];if(e.type==="Point")return[...e.coordinates]}if(Array.isArray(e)&&e.length>=2&&!Array.isArray(e[0])&&!Array.isArray(e[1]))return[...e];throw new Error("coord must be GeoJSON Point or an Array of numbers")}function E(e){if(Array.isArray(e))return e;if(e.type==="Feature"){if(e.geometry!==null)return e.geometry.coordinates}else if(e.coordinates)return e.coordinates;throw new Error("coords must be GeoJSON Feature, Geometry Object or an Array")}function W(e,n){return e.type==="FeatureCollection"?"FeatureCollection":e.type==="GeometryCollection"?"GeometryCollection":e.type==="Feature"&&e.geometry!==null?e.geometry.type:e.type}function z(e,n,t={}){var r=O(e),i=O(n),a=M(i[1]-r[1]),o=M(i[0]-r[0]),l=M(r[1]),u=M(i[1]),s=Math.pow(Math.sin(a/2),2)+Math.pow(Math.sin(o/2),2)*Math.cos(l)*Math.cos(u);return Y(2*Math.atan2(Math.sqrt(s),Math.sqrt(1-s)),t.units)}function R(e,n,t){if(e!==null)for(var r,i,a,o,l,u,s,c=0,f=0,h,v=e.type,p=v==="FeatureCollection",d=v==="Feature",C=p?e.features.length:1,m=0;m<C;m++){s=p?e.features[m].geometry:d?e.geometry:e,h=s?s.type==="GeometryCollection":!1,l=h?s.geometries.length:1;for(var L=0;L<l;L++){var w=0,g=0;if(o=h?s.geometries[L]:s,o!==null){u=o.coordinates;var b=o.type;switch(c=0,b){case null:break;case"Point":if(n(u,f,m,w,g)===!1)return!1;f++,w++;break;case"LineString":case"MultiPoint":for(r=0;r<u.length;r++){if(n(u[r],f,m,w,g)===!1)return!1;f++,b==="MultiPoint"&&w++}b==="LineString"&&w++;break;case"Polygon":case"MultiLineString":for(r=0;r<u.length;r++){for(i=0;i<u[r].length-c;i++){if(n(u[r][i],f,m,w,g)===!1)return!1;f++}b==="MultiLineString"&&w++,b==="Polygon"&&g++}b==="Polygon"&&w++;break;case"MultiPolygon":for(r=0;r<u.length;r++){for(g=0,i=0;i<u[r].length;i++){for(a=0;a<u[r][i].length-c;a++){if(n(u[r][i][a],f,m,w,g)===!1)return!1;f++}g++}w++}break;case"GeometryCollection":for(r=0;r<o.geometries.length;r++)if(R(o.geometries[r],n)===!1)return!1;break;default:throw new Error("Unknown Geometry Type")}}}}}function _(e,n){var t,r,i,a,o,l,u,s,c,f,h=0,v=e.type==="FeatureCollection",p=e.type==="Feature",d=v?e.features.length:1;for(t=0;t<d;t++){for(l=v?e.features[t].geometry:p?e.geometry:e,s=v?e.features[t].properties:p?e.properties:{},c=v?e.features[t].bbox:p?e.bbox:void 0,f=v?e.features[t].id:p?e.id:void 0,u=l?l.type==="GeometryCollection":!1,o=u?l.geometries.length:1,i=0;i<o;i++){if(a=u?l.geometries[i]:l,a===null){if(n(null,h,s,c,f)===!1)return!1;continue}switch(a.type){case"Point":case"LineString":case"MultiPoint":case"Polygon":case"MultiLineString":case"MultiPolygon":{if(n(a,h,s,c,f)===!1)return!1;break}case"GeometryCollection":{for(r=0;r<a.geometries.length;r++)if(n(a.geometries[r],h,s,c,f)===!1)return!1;break}default:throw new Error("Unknown Geometry Type")}}h++}}function H(e,n){_(e,function(t,r,i,a,o){var l=t===null?null:t.type;switch(l){case null:case"Point":case"LineString":case"Polygon":return n(P(t,i,{bbox:a,id:o}),r,0)===!1?!1:void 0}var u;switch(l){case"MultiPoint":u="Point";break;case"MultiLineString":u="LineString";break;case"MultiPolygon":u="Polygon";break}for(var s=0;s<t.coordinates.length;s++){var c=t.coordinates[s],f={type:u,coordinates:c};if(n(P(f,i),r,s)===!1)return!1}})}function K(e,n){H(e,function(t,r,i){var a=0;if(t.geometry){var o=t.geometry.type;if(!(o==="Point"||o==="MultiPoint")){var l,u=0,s=0,c=0;if(R(t,function(f,h,v,p,d){if(l===void 0||r>u||p>s||d>c){l=f,u=r,s=p,c=d,a=0;return}var C=X([l,f],t.properties);if(n(C,r,i,d,a)===!1)return!1;a++,l=f})===!1)return!1}}})}function Z(e,n,t){var r=t,i=!1;return K(e,function(a,o,l,u,s){i===!1&&t===void 0?r=a:r=n(r,a,o,l,u,s),i=!0}),r}function $(e,n={}){var t=typeof n=="object"?n.mutate:n;if(!e)throw new Error("geojson is required");var r=W(e),i=[];switch(r){case"LineString":i=G(e,r);break;case"MultiLineString":case"Polygon":E(e).forEach(function(o){i.push(G(o,r))});break;case"MultiPolygon":E(e).forEach(function(o){var l=[];o.forEach(function(u){l.push(G(u,r))}),i.push(l)});break;case"Point":return e;case"MultiPoint":var a={};E(e).forEach(function(o){var l=o.join("-");Object.prototype.hasOwnProperty.call(a,l)||(i.push(o),a[l]=!0)});break;default:throw new Error(r+" geometry not supported")}return e.coordinates?t===!0?(e.coordinates=i,e):{type:r,coordinates:i}:t===!0?(e.geometry.coordinates=i,e):P({type:r,coordinates:i},e.properties,{bbox:e.bbox,id:e.id})}function G(e,n){var t=E(e);if(t.length===2&&!q(t[0],t[1]))return t;var r=[],i=t.length-1,a=r.length;r.push(t[0]);for(var o=1;o<i;o++){var l=r[r.length-1];t[o][0]===l[0]&&t[o][1]===l[1]||(r.push(t[o]),a=r.length,a>2&&D(r[a-3],r[a-1],r[a-2])&&r.splice(r.length-2,1))}if(r.push(t[t.length-1]),a=r.length,(n==="Polygon"||n==="MultiPolygon")&&q(t[0],t[t.length-1])&&a<4)throw new Error("invalid polygon");return n==="LineString"&&a<3||D(r[a-3],r[a-1],r[a-2])&&r.splice(r.length-2,1),r}function q(e,n){return e[0]===n[0]&&e[1]===n[1]}function D(e,n,t){var r=t[0],i=t[1],a=e[0],o=e[1],l=n[0],u=n[1],s=r-a,c=i-o,f=l-a,h=u-o,v=s*h-c*f;return v!==0?!1:Math.abs(f)>=Math.abs(h)?f>0?a<=r&&r<=l:l<=r&&r<=a:h>0?o<=i&&i<=u:u<=i&&i<=o}function Q(e){if(!e)throw new Error("geojson is required");switch(e.type){case"Feature":return J(e);case"FeatureCollection":return x(e);case"Point":case"LineString":case"Polygon":case"MultiPoint":case"MultiLineString":case"MultiPolygon":case"GeometryCollection":return k(e);default:throw new Error("unknown GeoJSON type")}}function J(e){const n={type:"Feature"};return Object.keys(e).forEach(t=>{switch(t){case"type":case"properties":case"geometry":return;default:n[t]=e[t]}}),n.properties=T(e.properties),e.geometry==null?n.geometry=null:n.geometry=k(e.geometry),n}function T(e){const n={};return e&&Object.keys(e).forEach(t=>{const r=e[t];typeof r=="object"?r===null?n[t]=null:Array.isArray(r)?n[t]=r.map(i=>i):n[t]=T(r):n[t]=r}),n}function x(e){const n={type:"FeatureCollection"};return Object.keys(e).forEach(t=>{switch(t){case"type":case"features":return;default:n[t]=e[t]}}),n.features=e.features.map(t=>J(t)),n}function k(e){const n={type:e.type};return e.bbox&&(n.bbox=e.bbox),e.type==="GeometryCollection"?(n.geometries=e.geometries.map(t=>k(t)),n):(n.coordinates=B(e.coordinates),n)}function B(e){const n=e;return typeof n[0]!="object"?n.slice():n.map(t=>B(t))}function ue(e,n={}){return Z(e,(t,r)=>{const i=r.geometry.coordinates;return t+z(i[0],i[1],n)},0)}function I(e,n){var t=e[0]-n[0],r=e[1]-n[1];return t*t+r*r}function j(e,n,t){var r=n[0],i=n[1],a=t[0]-r,o=t[1]-i;if(a!==0||o!==0){var l=((e[0]-r)*a+(e[1]-i)*o)/(a*a+o*o);l>1?(r=t[0],i=t[1]):l>0&&(r+=a*l,i+=o*l)}return a=e[0]-r,o=e[1]-i,a*a+o*o}function ee(e,n){for(var t=e[0],r=[t],i,a=1,o=e.length;a<o;a++)i=e[a],I(i,t)>n&&(r.push(i),t=i);return t!==i&&r.push(i),r}function A(e,n,t,r,i){for(var a=r,o,l=n+1;l<t;l++){var u=j(e[l],e[n],e[t]);u>a&&(o=l,a=u)}a>r&&(o-n>1&&A(e,n,o,r,i),i.push(e[o]),t-o>1&&A(e,o,t,r,i))}function re(e,n){var t=e.length-1,r=[e[0]];return A(e,0,t,n,r),r.push(e[t]),r}function S(e,n,t){if(e.length<=2)return e;var r=n!==void 0?n*n:1;return e=t?e:ee(e,r),e=re(e,r),e}function se(e,n={}){var t,r,i;if(n=n??{},!V(n))throw new Error("options is invalid");const a=(t=n.tolerance)!=null?t:1,o=(r=n.highQuality)!=null?r:!1,l=(i=n.mutate)!=null?i:!1;if(!e)throw new Error("geojson is required");if(a&&a<0)throw new Error("invalid tolerance");return l!==!0&&(e=Q(e)),_(e,function(u){te(u,a,o)}),e}function te(e,n,t){const r=e.type;if(r==="Point"||r==="MultiPoint")return e;if($(e,{mutate:!0}),r!=="GeometryCollection")switch(r){case"LineString":e.coordinates=S(e.coordinates,n,t);break;case"MultiLineString":e.coordinates=e.coordinates.map(i=>S(i,n,t));break;case"Polygon":e.coordinates=N(e.coordinates,n,t);break;case"MultiPolygon":e.coordinates=e.coordinates.map(i=>N(i,n,t))}return e}function N(e,n,t){return e.map(function(r){if(r.length<4)throw new Error("invalid polygon");let i=n,a=S(r,i,t);for(;!ne(a);)i-=i*.01,a=S(r,i,t);return(a[a.length-1][0]!==a[0][0]||a[a.length-1][1]!==a[0][1])&&a.push(a[0]),a})}function ne(e){return e.length<3?!1:!(e.length===3&&e[2][0]===e[0][0]&&e[2][1]===e[0][1])}export{oe as a,ue as b,ie as c,z as d,E as e,ae as g,X as l,le as p,se as s};
