let c;const U=new Uint8Array(16);function p(){if(!c&&(c=typeof crypto<"u"&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!c))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return c(U)}const u=[];for(let n=0;n<256;++n)u.push((n+256).toString(16).slice(1));function g(n,t=0){return u[n[t+0]]+u[n[t+1]]+u[n[t+2]]+u[n[t+3]]+"-"+u[n[t+4]]+u[n[t+5]]+"-"+u[n[t+6]]+u[n[t+7]]+"-"+u[n[t+8]]+u[n[t+9]]+"-"+u[n[t+10]]+u[n[t+11]]+u[n[t+12]]+u[n[t+13]]+u[n[t+14]]+u[n[t+15]]}const l=typeof crypto<"u"&&crypto.randomUUID&&crypto.randomUUID.bind(crypto),y={randomUUID:l};function D(n,t,r){if(y.randomUUID&&!n)return y.randomUUID();n=n||{};const e=n.random||(n.rng||p)();return e[6]=e[6]&15|64,e[8]=e[8]&63|128,g(e)}const d=[];for(let n=0;n<256;++n)d.push((n+256).toString(16).slice(1));function a(n,t=0){return(d[n[t+0]]+d[n[t+1]]+d[n[t+2]]+d[n[t+3]]+"-"+d[n[t+4]]+d[n[t+5]]+"-"+d[n[t+6]]+d[n[t+7]]+"-"+d[n[t+8]]+d[n[t+9]]+"-"+d[n[t+10]]+d[n[t+11]]+d[n[t+12]]+d[n[t+13]]+d[n[t+14]]+d[n[t+15]]).toLowerCase()}let o;const x=new Uint8Array(16);function b(){if(!o){if(typeof crypto>"u"||!crypto.getRandomValues)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");o=crypto.getRandomValues.bind(crypto)}return o(x)}const h=typeof crypto<"u"&&crypto.randomUUID&&crypto.randomUUID.bind(crypto),m={randomUUID:h};function I(n,t,r){var i;if(m.randomUUID&&!n)return m.randomUUID();n=n||{};const e=n.random??((i=n.rng)==null?void 0:i.call(n))??b();if(e.length<16)throw new Error("Random bytes length must be >= 16");return e[6]=e[6]&15|64,e[8]=e[8]&63|128,a(e)}export{I as a,D as v};
