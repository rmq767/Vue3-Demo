var D=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function F(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function J(e){if(e.__esModule)return e;var i=e.default;if(typeof i=="function"){var t=function r(){return this instanceof r?Reflect.construct(i,arguments,this.constructor):i.apply(this,arguments)};t.prototype=i.prototype}else t={};return Object.defineProperty(t,"__esModule",{value:!0}),Object.keys(e).forEach(function(r){var n=Object.getOwnPropertyDescriptor(e,r);Object.defineProperty(t,r,n.get?n:{enumerable:!0,get:function(){return e[r]}})}),t}var y=63710088e-1,L={centimeters:y*100,centimetres:y*100,degrees:360/(2*Math.PI),feet:y*3.28084,inches:y*39.37,kilometers:y/1e3,kilometres:y/1e3,meters:y,metres:y,miles:y/1609.344,millimeters:y*1e3,millimetres:y*1e3,nauticalmiles:y/1852,radians:1,yards:y*1.0936};function d(e,i,t={}){const r={type:"Feature"};return(t.id===0||t.id)&&(r.id=t.id),t.bbox&&(r.bbox=t.bbox),r.properties=i||{},r.geometry=e,r}function U(e,i,t={}){if(!e)throw new Error("coordinates is required");if(!Array.isArray(e))throw new Error("coordinates must be an Array");if(e.length<2)throw new Error("coordinates must be at least 2 numbers long");if(!G(e[0])||!G(e[1]))throw new Error("coordinates must contain numbers");return d({type:"Point",coordinates:e},i,t)}function k(e,i,t={}){if(e.length<2)throw new Error("coordinates must be an array of two or more positions");return d({type:"LineString",coordinates:e},i,t)}function O(e,i="kilometers"){const t=L[i];if(!t)throw new Error(i+" units is invalid");return e*t}function M(e){return e%360*Math.PI/180}function G(e){return!isNaN(e)&&e!==null&&!Array.isArray(e)}function S(e){if(!e)throw new Error("coord is required");if(!Array.isArray(e)){if(e.type==="Feature"&&e.geometry!==null&&e.geometry.type==="Point")return[...e.geometry.coordinates];if(e.type==="Point")return[...e.coordinates]}if(Array.isArray(e)&&e.length>=2&&!Array.isArray(e[0])&&!Array.isArray(e[1]))return[...e];throw new Error("coord must be GeoJSON Point or an Array of numbers")}function z(e){if(Array.isArray(e))return e;if(e.type==="Feature"){if(e.geometry!==null)return e.geometry.coordinates}else if(e.coordinates)return e.coordinates;throw new Error("coords must be GeoJSON Feature, Geometry Object or an Array")}function N(e,i,t={}){var r=S(e),n=S(i),s=M(n[1]-r[1]),u=M(n[0]-r[0]),f=M(r[1]),o=M(n[1]),a=Math.pow(Math.sin(s/2),2)+Math.pow(Math.sin(u/2),2)*Math.cos(f)*Math.cos(o);return O(2*Math.atan2(Math.sqrt(a),Math.sqrt(1-a)),t.units)}function C(e,i,t){if(e!==null)for(var r,n,s,u,f,o,a,c=0,l=0,p,v=e.type,h=v==="FeatureCollection",b=v==="Feature",A=h?e.features.length:1,w=0;w<A;w++){a=h?e.features[w].geometry:b?e.geometry:e,p=a?a.type==="GeometryCollection":!1,f=p?a.geometries.length:1;for(var E=0;E<f;E++){var g=0,P=0;if(u=p?a.geometries[E]:a,u!==null){o=u.coordinates;var m=u.type;switch(c=t&&(m==="Polygon"||m==="MultiPolygon")?1:0,m){case null:break;case"Point":if(i(o,l,w,g,P)===!1)return!1;l++,g++;break;case"LineString":case"MultiPoint":for(r=0;r<o.length;r++){if(i(o[r],l,w,g,P)===!1)return!1;l++,m==="MultiPoint"&&g++}m==="LineString"&&g++;break;case"Polygon":case"MultiLineString":for(r=0;r<o.length;r++){for(n=0;n<o[r].length-c;n++){if(i(o[r][n],l,w,g,P)===!1)return!1;l++}m==="MultiLineString"&&g++,m==="Polygon"&&P++}m==="Polygon"&&g++;break;case"MultiPolygon":for(r=0;r<o.length;r++){for(P=0,n=0;n<o[r].length;n++){for(s=0;s<o[r][n].length-c;s++){if(i(o[r][n][s],l,w,g,P)===!1)return!1;l++}P++}g++}break;case"GeometryCollection":for(r=0;r<u.geometries.length;r++)if(C(u.geometries[r],i,t)===!1)return!1;break;default:throw new Error("Unknown Geometry Type")}}}}}function _(e,i){var t,r,n,s,u,f,o,a,c,l,p=0,v=e.type==="FeatureCollection",h=e.type==="Feature",b=v?e.features.length:1;for(t=0;t<b;t++){for(f=v?e.features[t].geometry:h?e.geometry:e,a=v?e.features[t].properties:h?e.properties:{},c=v?e.features[t].bbox:h?e.bbox:void 0,l=v?e.features[t].id:h?e.id:void 0,o=f?f.type==="GeometryCollection":!1,u=o?f.geometries.length:1,n=0;n<u;n++){if(s=o?f.geometries[n]:f,s===null){if(i(null,p,a,c,l)===!1)return!1;continue}switch(s.type){case"Point":case"LineString":case"MultiPoint":case"Polygon":case"MultiLineString":case"MultiPolygon":{if(i(s,p,a,c,l)===!1)return!1;break}case"GeometryCollection":{for(r=0;r<s.geometries.length;r++)if(i(s.geometries[r],p,a,c,l)===!1)return!1;break}default:throw new Error("Unknown Geometry Type")}}p++}}function q(e,i){_(e,function(t,r,n,s,u){var f=t===null?null:t.type;switch(f){case null:case"Point":case"LineString":case"Polygon":return i(d(t,n,{bbox:s,id:u}),r,0)===!1?!1:void 0}var o;switch(f){case"MultiPoint":o="Point";break;case"MultiLineString":o="LineString";break;case"MultiPolygon":o="Polygon";break}for(var a=0;a<t.coordinates.length;a++){var c=t.coordinates[a],l={type:o,coordinates:c};if(i(d(l,n),r,a)===!1)return!1}})}function R(e,i){q(e,function(t,r,n){var s=0;if(t.geometry){var u=t.geometry.type;if(!(u==="Point"||u==="MultiPoint")){var f,o=0,a=0,c=0;if(C(t,function(l,p,v,h,b){if(f===void 0||r>o||h>a||b>c){f=l,o=r,a=h,c=b,s=0;return}var A=k([f,l],t.properties);if(i(A,r,n,b,s)===!1)return!1;s++,f=l})===!1)return!1}}})}function B(e,i,t){var r=t,n=!1;return R(e,function(s,u,f,o,a){n===!1&&t===void 0?r=s:r=i(r,s,u,f,o,a),n=!0}),r}function H(e,i={}){return B(e,(t,r)=>{const n=r.geometry.coordinates;return t+N(n[0],n[1],i)},0)}export{J as a,H as b,D as c,N as d,z as e,F as g,k as l,U as p};
